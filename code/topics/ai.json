{
  "topic": "AI",
  "articles": [
    {
      "title": "How Generative Models Misclassify Business Transactions, and Why It Is a Structural, Not Semantic, Problem",
      "link": "https://dev.to/agustin_v_startari/how-generative-models-misclassify-business-transactions-and-why-it-is-a-structural-not-semantic-4nip",
      "summary": "Generative models in corporate ERPs misclassify expenses not because of semantic misunderstandings but due to syntactic processing errors that align with incorrect financial logic.",
      "summary_original": "** **The forthcoming paper Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs addresses a critical yet underexamined issue in enterprise automation. It analyzes how generative models misclassify expenses not due to misunderstanding meaning, but due to the execution of syntactic patterns that do not align with financial or organizational logic. The paper uses real ERP (Enterprise Resource Planning) output and rule-based accounting layers to show that these systems process transaction descriptions according to their syntactic layout. These activations are treated as sufficient cues for classification, even in cases where mislabeling leads to regulatory or audit risk. **2. Why This Matters **Many observers diagnose these misclassifications as problems caused by limited data or poor prompt design. This paper argues otherwise. The central thesis is that such errors result from syntactic obedience. That is, the model follows structural rules derived from its training, regardless of fiscal or semantic inconsistency. Categories like \u201cconsulting,\u201d \u201coffice expenses,\u201d or \u201clogistics\u201d are not defined semantically. They are artifacts of organizational grammar. When a software license is recorded as a travel cost, the AI is not hallucinating. It is reproducing a rule pattern that aligns with syntactic activation but not with accounting rationale. This disjunction becomes problematic in environments where automatic coding feeds into tax reports, cross-border compliance, or internal auditing systems. **3. Examples from the Field **A GPT-based ERP system classifies a payment to \u201cOpenAI\u201d as a travel expense because the entry includes the phrase \u201cAPI usage \u2013 global token log,\u201d which correlates structurally with travel logs in prior data. Payments to an external consultant are tagged as either \u201cfreelance\u201d or \u201clegal services,\u201d depending on which invoice section the model anchors to. A refund from a health provider is classified as a marketing cost due to its proximity to \u201ccustomer benefit\u201d in prior token patterns. In each case, the system does not produce random errors. It activates rule-compiled syntax that is internally coherent but externally misaligned. **4. Structural Misclassification Is Not a Bug **The model is not failing. It is operating within the boundaries of its training, applying precedence to structural regularities over referential verification. This behavior reflects a deeper principle: syntactic sovereignty overrides contextual fidelity. The legitimacy of the output is derived from formal consistency, not from truth or compliance. The implication is clear. The question is no longer how to make AI models more accurate in semantic terms. It is how to design compiled syntactic rules that are institutionally accountable and auditable. **5. Where This Fits in the Broader Research **This article extends previous research on formal obedience and algorithmic authority. It draws from ongoing investigations into how generative models replicate command chains not through semantic reasoning, but through syntactic recursion. Relevant background includes: *Algorithmic Obedience *https://doi.org/10.2139/ssrn.5282045 When Language Follows Form, Not Meaning https://doi.org/10.2139/ssrn.5285265 The Grammar of Objectivity https://doi.org/10.2139/ssrn.5319520 These works explore how structure generates authority in automated systems. The new paper applies that lens to corporate software, showing how formal misalignment becomes embedded in everyday workflows. 6. Call to Action The full article Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs will be published shortly. You will find it on Zenodo, SSRN, Figshare, and AI & Power Discourse Quarterly. To receive early access, follow: Website https://www.agustinvstartari.com/ Zenodo profile https://zenodo.org/records/16044858 SSRN Author Page https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915 You may also subscribe on Dev.to, HackerNoon, or Medium to follow the ongoing Syntactic Authority series. 7. Author and Ethos Agustin V. Startari Author, Linguist, Researcher ORCID: https://orcid.org/0000-0002-8587-4411 Researcher ID: K-5792-2016 Zenodo: https://zenodo.org/records/16044858 *SSRN: *https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915 Ethos I do not use artificial intelligence to write what I don\u2019t know. I use it to challenge what I do. I write to reclaim the voice in an age of automated neutrality. My work is not outsourced. It is authored.",
      "summary_html": "<p>**<br />\n<a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\"><img alt=\" \" height=\"533\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\" width=\"800\" /></a>**The forthcoming paper Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs addresses a critical yet underexamined issue in enterprise automation. It analyzes how generative models misclassify expenses not due to misunderstanding meaning, but due to the execution of syntactic patterns that do not align with financial or organizational logic.</p>\n\n<p>The paper uses real ERP (Enterprise Resource Planning) output and rule-based accounting layers to show that these systems process transaction descriptions according to their syntactic layout. These activations are treated as sufficient cues for classification, even in cases where mislabeling leads to regulatory or audit risk.</p>\n\n<p>**2. Why This Matters<br />\n**Many observers diagnose these misclassifications as problems caused by limited data or poor prompt design. This paper argues otherwise. The central thesis is that such errors result from syntactic obedience. That is, the model follows structural rules derived from its training, regardless of fiscal or semantic inconsistency.</p>\n\n<p>Categories like \u201cconsulting,\u201d \u201coffice expenses,\u201d or \u201clogistics\u201d are not defined semantically. They are artifacts of organizational grammar. When a software license is recorded as a travel cost, the AI is not hallucinating. It is reproducing a rule pattern that aligns with syntactic activation but not with accounting rationale.</p>\n\n<p>This disjunction becomes problematic in environments where automatic coding feeds into tax reports, cross-border compliance, or internal auditing systems.</p>\n\n<p>**3. Examples from the Field<br />\n**A GPT-based ERP system classifies a payment to \u201cOpenAI\u201d as a travel expense because the entry includes the phrase \u201cAPI usage \u2013 global token log,\u201d which correlates structurally with travel logs in prior data.</p>\n\n<p>Payments to an external consultant are tagged as either \u201cfreelance\u201d or \u201clegal services,\u201d depending on which invoice section the model anchors to.</p>\n\n<p>A refund from a health provider is classified as a marketing cost due to its proximity to \u201ccustomer benefit\u201d in prior token patterns.</p>\n\n<p>In each case, the system does not produce random errors. It activates rule-compiled syntax that is internally coherent but externally misaligned.</p>\n\n<p>**4. Structural Misclassification Is Not a Bug<br />\n**The model is not failing. It is operating within the boundaries of its training, applying precedence to structural regularities over referential verification.</p>\n\n<p>This behavior reflects a deeper principle: syntactic sovereignty overrides contextual fidelity. The legitimacy of the output is derived from formal consistency, not from truth or compliance.</p>\n\n<p>The implication is clear. The question is no longer how to make AI models more accurate in semantic terms. It is how to design compiled syntactic rules that are institutionally accountable and auditable.</p>\n\n<p>**5. Where This Fits in the Broader Research<br />\n**This article extends previous research on formal obedience and algorithmic authority. It draws from ongoing investigations into how generative models replicate command chains not through semantic reasoning, but through syntactic recursion.</p>\n\n<p>Relevant background includes:</p>\n\n<p>*<em>Algorithmic Obedience<br />\n*</em><a href=\"https://doi.org/10.2139/ssrn.5282045\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5282045</a></p>\n\n<p><strong>When Language Follows Form, Not Meaning</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5285265\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5285265</a></p>\n\n<p><strong>The Grammar of Objectivity</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5319520\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5319520</a></p>\n\n<p>These works explore how structure generates authority in automated systems. The new paper applies that lens to corporate software, showing how formal misalignment becomes embedded in everyday workflows.</p>\n\n<p><strong>6. Call to Action</strong><br />\nThe full article Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs will be published shortly. You will find it on Zenodo, SSRN, Figshare, and AI &amp; Power Discourse Quarterly.</p>\n\n<p>To receive early access, follow:</p>\n\n<p><strong>Website</strong><br />\n<a href=\"https://www.agustinvstartari.com/\" rel=\"noopener noreferrer\">https://www.agustinvstartari.com/</a></p>\n\n<p><strong>Zenodo profile</strong><br />\n<a href=\"https://zenodo.org/records/16044858\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a></p>\n\n<p><strong>SSRN Author Page</strong><br />\n<a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p>You may also subscribe on Dev.to, HackerNoon, or Medium to follow the ongoing Syntactic Authority series.</p>\n\n<p><strong>7. Author and Ethos</strong><br />\nAgustin V. Startari<br />\nAuthor, Linguist, Researcher<br />\n<strong>ORCID:</strong> <a href=\"https://orcid.org/0000-0002-8587-4411\" rel=\"noopener noreferrer\">https://orcid.org/0000-0002-8587-4411</a><br />\n<strong>Researcher ID:</strong> K-5792-2016<br />\n<strong>Zenodo:</strong> <a href=\"https://zenodo.org/communities/aipdq/\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a><br />\n*<em>SSRN: *</em><a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p><strong>Ethos</strong><br />\nI do not use artificial intelligence to write what I don\u2019t know. I use it to challenge what I do. I write to reclaim the voice in an age of automated neutrality. My work is not outsourced. It is authored.</p>",
      "is_html_summary": true,
      "has_llm_summary": true,
      "from_feed": "https://dev.to/feed/tag/react",
      "published_parsed": [
        2025,
        7,
        21,
        12,
        23,
        33,
        0,
        202,
        0
      ],
      "published": "Mon, 21 Jul 2025 12:23:33 +0000",
      "matched_keywords": [
        "openai",
        "artificial intelligence",
        "gpt",
        "automation",
        "gpt"
      ],
      "keyword_matches": {
        "openai": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "<p>**<br />\n<a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\"><img alt=\" \" height=\"533\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\" width=\"800\" /></a>**The forthcoming paper Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs addresses a critical yet underexamined issue in enterprise automation. It analyzes how generative models misclassify expenses not due to misunderstanding meaning, but due to the execution of syntactic patterns that do not align with financial or organizational logic.</p>\n\n<p>The paper uses real ERP (Enterprise Resource Planning) output and rule-based accounting layers to show that these systems process transaction descriptions according to their syntactic layout. These activations are treated as sufficient cues for classification, even in cases where mislabeling leads to regulatory or audit risk.</p>\n\n<p>**2. Why This Matters<br />\n**Many observers diagnose these misclassifications as problems caused by limited data or poor prompt design. This paper argues otherwise. The central thesis is that such errors result from syntactic obedience. That is, the model follows structural rules derived from its training, regardless of fiscal or semantic inconsistency.</p>\n\n<p>Categories like \u201cconsulting,\u201d \u201coffice expenses,\u201d or \u201clogistics\u201d are not defined semantically. They are artifacts of organizational grammar. When a software license is recorded as a travel cost, the AI is not hallucinating. It is reproducing a rule pattern that aligns with syntactic activation but not with accounting rationale.</p>\n\n<p>This disjunction becomes problematic in environments where automatic coding feeds into tax reports, cross-border compliance, or internal auditing systems.</p>\n\n<p>**3. Examples from the Field<br />\n**A GPT-based ERP system classifies a payment to \u201cOpenAI\u201d as a travel expense because the entry includes the phrase \u201cAPI usage \u2013 global token log,\u201d which correlates structurally with travel logs in prior data.</p>\n\n<p>Payments to an external consultant are tagged as either \u201cfreelance\u201d or \u201clegal services,\u201d depending on which invoice section the model anchors to.</p>\n\n<p>A refund from a health provider is classified as a marketing cost due to its proximity to \u201ccustomer benefit\u201d in prior token patterns.</p>\n\n<p>In each case, the system does not produce random errors. It activates rule-compiled syntax that is internally coherent but externally misaligned.</p>\n\n<p>**4. Structural Misclassification Is Not a Bug<br />\n**The model is not failing. It is operating within the boundaries of its training, applying precedence to structural regularities over referential verification.</p>\n\n<p>This behavior reflects a deeper principle: syntactic sovereignty overrides contextual fidelity. The legitimacy of the output is derived from formal consistency, not from truth or compliance.</p>\n\n<p>The implication is clear. The question is no longer how to make AI models more accurate in semantic terms. It is how to design compiled syntactic rules that are institutionally accountable and auditable.</p>\n\n<p>**5. Where This Fits in the Broader Research<br />\n**This article extends previous research on formal obedience and algorithmic authority. It draws from ongoing investigations into how generative models replicate command chains not through semantic reasoning, but through syntactic recursion.</p>\n\n<p>Relevant background includes:</p>\n\n<p>*<em>Algorithmic Obedience<br />\n*</em><a href=\"https://doi.org/10.2139/ssrn.5282045\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5282045</a></p>\n\n<p><strong>When Language Follows Form, Not Meaning</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5285265\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5285265</a></p>\n\n<p><strong>The Grammar of Objectivity</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5319520\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5319520</a></p>\n\n<p>These works explore how structure generates authority in automated systems. The new paper applies that lens to corporate software, showing how formal misalignment becomes embedded in everyday workflows.</p>\n\n<p><strong>6. Call to Action</strong><br />\nThe full article Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs will be published shortly. You will find it on Zenodo, SSRN, Figshare, and AI &amp; Power Discourse Quarterly.</p>\n\n<p>To receive early access, follow:</p>\n\n<p><strong>Website</strong><br />\n<a href=\"https://www.agustinvstartari.com/\" rel=\"noopener noreferrer\">https://www.agustinvstartari.com/</a></p>\n\n<p><strong>Zenodo profile</strong><br />\n<a href=\"https://zenodo.org/records/16044858\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a></p>\n\n<p><strong>SSRN Author Page</strong><br />\n<a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p>You may also subscribe on Dev.to, HackerNoon, or Medium to follow the ongoing Syntactic Authority series.</p>\n\n<p><strong>7. Author and Ethos</strong><br />\nAgustin V. Startari<br />\nAuthor, Linguist, Researcher<br />\n<strong>ORCID:</strong> <a href=\"https://orcid.org/0000-0002-8587-4411\" rel=\"noopener noreferrer\">https://orcid.org/0000-0002-8587-4411</a><br />\n<strong>Researcher ID:</strong> K-5792-2016<br />\n<strong>Zenodo:</strong> <a href=\"https://zenodo.org/communities/aipdq/\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a><br />\n*<em>SSRN: *</em><a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p><strong>Ethos</strong><br />\nI do not use artificial intelligence to write what I don\u2019t know. I use it to challenge what I do. I write to reclaim the voice in an age of automated neutrality. My work is not outsourced. It is authored.</p>"
        },
        "artificial intelligence": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "<p>**<br />\n<a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\"><img alt=\" \" height=\"533\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\" width=\"800\" /></a>**The forthcoming paper Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs addresses a critical yet underexamined issue in enterprise automation. It analyzes how generative models misclassify expenses not due to misunderstanding meaning, but due to the execution of syntactic patterns that do not align with financial or organizational logic.</p>\n\n<p>The paper uses real ERP (Enterprise Resource Planning) output and rule-based accounting layers to show that these systems process transaction descriptions according to their syntactic layout. These activations are treated as sufficient cues for classification, even in cases where mislabeling leads to regulatory or audit risk.</p>\n\n<p>**2. Why This Matters<br />\n**Many observers diagnose these misclassifications as problems caused by limited data or poor prompt design. This paper argues otherwise. The central thesis is that such errors result from syntactic obedience. That is, the model follows structural rules derived from its training, regardless of fiscal or semantic inconsistency.</p>\n\n<p>Categories like \u201cconsulting,\u201d \u201coffice expenses,\u201d or \u201clogistics\u201d are not defined semantically. They are artifacts of organizational grammar. When a software license is recorded as a travel cost, the AI is not hallucinating. It is reproducing a rule pattern that aligns with syntactic activation but not with accounting rationale.</p>\n\n<p>This disjunction becomes problematic in environments where automatic coding feeds into tax reports, cross-border compliance, or internal auditing systems.</p>\n\n<p>**3. Examples from the Field<br />\n**A GPT-based ERP system classifies a payment to \u201cOpenAI\u201d as a travel expense because the entry includes the phrase \u201cAPI usage \u2013 global token log,\u201d which correlates structurally with travel logs in prior data.</p>\n\n<p>Payments to an external consultant are tagged as either \u201cfreelance\u201d or \u201clegal services,\u201d depending on which invoice section the model anchors to.</p>\n\n<p>A refund from a health provider is classified as a marketing cost due to its proximity to \u201ccustomer benefit\u201d in prior token patterns.</p>\n\n<p>In each case, the system does not produce random errors. It activates rule-compiled syntax that is internally coherent but externally misaligned.</p>\n\n<p>**4. Structural Misclassification Is Not a Bug<br />\n**The model is not failing. It is operating within the boundaries of its training, applying precedence to structural regularities over referential verification.</p>\n\n<p>This behavior reflects a deeper principle: syntactic sovereignty overrides contextual fidelity. The legitimacy of the output is derived from formal consistency, not from truth or compliance.</p>\n\n<p>The implication is clear. The question is no longer how to make AI models more accurate in semantic terms. It is how to design compiled syntactic rules that are institutionally accountable and auditable.</p>\n\n<p>**5. Where This Fits in the Broader Research<br />\n**This article extends previous research on formal obedience and algorithmic authority. It draws from ongoing investigations into how generative models replicate command chains not through semantic reasoning, but through syntactic recursion.</p>\n\n<p>Relevant background includes:</p>\n\n<p>*<em>Algorithmic Obedience<br />\n*</em><a href=\"https://doi.org/10.2139/ssrn.5282045\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5282045</a></p>\n\n<p><strong>When Language Follows Form, Not Meaning</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5285265\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5285265</a></p>\n\n<p><strong>The Grammar of Objectivity</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5319520\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5319520</a></p>\n\n<p>These works explore how structure generates authority in automated systems. The new paper applies that lens to corporate software, showing how formal misalignment becomes embedded in everyday workflows.</p>\n\n<p><strong>6. Call to Action</strong><br />\nThe full article Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs will be published shortly. You will find it on Zenodo, SSRN, Figshare, and AI &amp; Power Discourse Quarterly.</p>\n\n<p>To receive early access, follow:</p>\n\n<p><strong>Website</strong><br />\n<a href=\"https://www.agustinvstartari.com/\" rel=\"noopener noreferrer\">https://www.agustinvstartari.com/</a></p>\n\n<p><strong>Zenodo profile</strong><br />\n<a href=\"https://zenodo.org/records/16044858\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a></p>\n\n<p><strong>SSRN Author Page</strong><br />\n<a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p>You may also subscribe on Dev.to, HackerNoon, or Medium to follow the ongoing Syntactic Authority series.</p>\n\n<p><strong>7. Author and Ethos</strong><br />\nAgustin V. Startari<br />\nAuthor, Linguist, Researcher<br />\n<strong>ORCID:</strong> <a href=\"https://orcid.org/0000-0002-8587-4411\" rel=\"noopener noreferrer\">https://orcid.org/0000-0002-8587-4411</a><br />\n<strong>Researcher ID:</strong> K-5792-2016<br />\n<strong>Zenodo:</strong> <a href=\"https://zenodo.org/communities/aipdq/\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a><br />\n*<em>SSRN: *</em><a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p><strong>Ethos</strong><br />\nI do not use artificial intelligence to write what I don\u2019t know. I use it to challenge what I do. I write to reclaim the voice in an age of automated neutrality. My work is not outsourced. It is authored.</p>"
        },
        "gpt": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "<p>**<br />\n<a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\"><img alt=\" \" height=\"533\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\" width=\"800\" /></a>**The forthcoming paper Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs addresses a critical yet underexamined issue in enterprise automation. It analyzes how generative models misclassify expenses not due to misunderstanding meaning, but due to the execution of syntactic patterns that do not align with financial or organizational logic.</p>\n\n<p>The paper uses real ERP (Enterprise Resource Planning) output and rule-based accounting layers to show that these systems process transaction descriptions according to their syntactic layout. These activations are treated as sufficient cues for classification, even in cases where mislabeling leads to regulatory or audit risk.</p>\n\n<p>**2. Why This Matters<br />\n**Many observers diagnose these misclassifications as problems caused by limited data or poor prompt design. This paper argues otherwise. The central thesis is that such errors result from syntactic obedience. That is, the model follows structural rules derived from its training, regardless of fiscal or semantic inconsistency.</p>\n\n<p>Categories like \u201cconsulting,\u201d \u201coffice expenses,\u201d or \u201clogistics\u201d are not defined semantically. They are artifacts of organizational grammar. When a software license is recorded as a travel cost, the AI is not hallucinating. It is reproducing a rule pattern that aligns with syntactic activation but not with accounting rationale.</p>\n\n<p>This disjunction becomes problematic in environments where automatic coding feeds into tax reports, cross-border compliance, or internal auditing systems.</p>\n\n<p>**3. Examples from the Field<br />\n**A GPT-based ERP system classifies a payment to \u201cOpenAI\u201d as a travel expense because the entry includes the phrase \u201cAPI usage \u2013 global token log,\u201d which correlates structurally with travel logs in prior data.</p>\n\n<p>Payments to an external consultant are tagged as either \u201cfreelance\u201d or \u201clegal services,\u201d depending on which invoice section the model anchors to.</p>\n\n<p>A refund from a health provider is classified as a marketing cost due to its proximity to \u201ccustomer benefit\u201d in prior token patterns.</p>\n\n<p>In each case, the system does not produce random errors. It activates rule-compiled syntax that is internally coherent but externally misaligned.</p>\n\n<p>**4. Structural Misclassification Is Not a Bug<br />\n**The model is not failing. It is operating within the boundaries of its training, applying precedence to structural regularities over referential verification.</p>\n\n<p>This behavior reflects a deeper principle: syntactic sovereignty overrides contextual fidelity. The legitimacy of the output is derived from formal consistency, not from truth or compliance.</p>\n\n<p>The implication is clear. The question is no longer how to make AI models more accurate in semantic terms. It is how to design compiled syntactic rules that are institutionally accountable and auditable.</p>\n\n<p>**5. Where This Fits in the Broader Research<br />\n**This article extends previous research on formal obedience and algorithmic authority. It draws from ongoing investigations into how generative models replicate command chains not through semantic reasoning, but through syntactic recursion.</p>\n\n<p>Relevant background includes:</p>\n\n<p>*<em>Algorithmic Obedience<br />\n*</em><a href=\"https://doi.org/10.2139/ssrn.5282045\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5282045</a></p>\n\n<p><strong>When Language Follows Form, Not Meaning</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5285265\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5285265</a></p>\n\n<p><strong>The Grammar of Objectivity</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5319520\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5319520</a></p>\n\n<p>These works explore how structure generates authority in automated systems. The new paper applies that lens to corporate software, showing how formal misalignment becomes embedded in everyday workflows.</p>\n\n<p><strong>6. Call to Action</strong><br />\nThe full article Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs will be published shortly. You will find it on Zenodo, SSRN, Figshare, and AI &amp; Power Discourse Quarterly.</p>\n\n<p>To receive early access, follow:</p>\n\n<p><strong>Website</strong><br />\n<a href=\"https://www.agustinvstartari.com/\" rel=\"noopener noreferrer\">https://www.agustinvstartari.com/</a></p>\n\n<p><strong>Zenodo profile</strong><br />\n<a href=\"https://zenodo.org/records/16044858\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a></p>\n\n<p><strong>SSRN Author Page</strong><br />\n<a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p>You may also subscribe on Dev.to, HackerNoon, or Medium to follow the ongoing Syntactic Authority series.</p>\n\n<p><strong>7. Author and Ethos</strong><br />\nAgustin V. Startari<br />\nAuthor, Linguist, Researcher<br />\n<strong>ORCID:</strong> <a href=\"https://orcid.org/0000-0002-8587-4411\" rel=\"noopener noreferrer\">https://orcid.org/0000-0002-8587-4411</a><br />\n<strong>Researcher ID:</strong> K-5792-2016<br />\n<strong>Zenodo:</strong> <a href=\"https://zenodo.org/communities/aipdq/\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a><br />\n*<em>SSRN: *</em><a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p><strong>Ethos</strong><br />\nI do not use artificial intelligence to write what I don\u2019t know. I use it to challenge what I do. I write to reclaim the voice in an age of automated neutrality. My work is not outsourced. It is authored.</p>"
        },
        "automation": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "<p>**<br />\n<a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\"><img alt=\" \" height=\"533\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdanksq0mqq4oj2a2bkbd.png\" width=\"800\" /></a>**The forthcoming paper Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs addresses a critical yet underexamined issue in enterprise automation. It analyzes how generative models misclassify expenses not due to misunderstanding meaning, but due to the execution of syntactic patterns that do not align with financial or organizational logic.</p>\n\n<p>The paper uses real ERP (Enterprise Resource Planning) output and rule-based accounting layers to show that these systems process transaction descriptions according to their syntactic layout. These activations are treated as sufficient cues for classification, even in cases where mislabeling leads to regulatory or audit risk.</p>\n\n<p>**2. Why This Matters<br />\n**Many observers diagnose these misclassifications as problems caused by limited data or poor prompt design. This paper argues otherwise. The central thesis is that such errors result from syntactic obedience. That is, the model follows structural rules derived from its training, regardless of fiscal or semantic inconsistency.</p>\n\n<p>Categories like \u201cconsulting,\u201d \u201coffice expenses,\u201d or \u201clogistics\u201d are not defined semantically. They are artifacts of organizational grammar. When a software license is recorded as a travel cost, the AI is not hallucinating. It is reproducing a rule pattern that aligns with syntactic activation but not with accounting rationale.</p>\n\n<p>This disjunction becomes problematic in environments where automatic coding feeds into tax reports, cross-border compliance, or internal auditing systems.</p>\n\n<p>**3. Examples from the Field<br />\n**A GPT-based ERP system classifies a payment to \u201cOpenAI\u201d as a travel expense because the entry includes the phrase \u201cAPI usage \u2013 global token log,\u201d which correlates structurally with travel logs in prior data.</p>\n\n<p>Payments to an external consultant are tagged as either \u201cfreelance\u201d or \u201clegal services,\u201d depending on which invoice section the model anchors to.</p>\n\n<p>A refund from a health provider is classified as a marketing cost due to its proximity to \u201ccustomer benefit\u201d in prior token patterns.</p>\n\n<p>In each case, the system does not produce random errors. It activates rule-compiled syntax that is internally coherent but externally misaligned.</p>\n\n<p>**4. Structural Misclassification Is Not a Bug<br />\n**The model is not failing. It is operating within the boundaries of its training, applying precedence to structural regularities over referential verification.</p>\n\n<p>This behavior reflects a deeper principle: syntactic sovereignty overrides contextual fidelity. The legitimacy of the output is derived from formal consistency, not from truth or compliance.</p>\n\n<p>The implication is clear. The question is no longer how to make AI models more accurate in semantic terms. It is how to design compiled syntactic rules that are institutionally accountable and auditable.</p>\n\n<p>**5. Where This Fits in the Broader Research<br />\n**This article extends previous research on formal obedience and algorithmic authority. It draws from ongoing investigations into how generative models replicate command chains not through semantic reasoning, but through syntactic recursion.</p>\n\n<p>Relevant background includes:</p>\n\n<p>*<em>Algorithmic Obedience<br />\n*</em><a href=\"https://doi.org/10.2139/ssrn.5282045\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5282045</a></p>\n\n<p><strong>When Language Follows Form, Not Meaning</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5285265\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5285265</a></p>\n\n<p><strong>The Grammar of Objectivity</strong><br />\n<a href=\"https://doi.org/10.2139/ssrn.5319520\" rel=\"noopener noreferrer\">https://doi.org/10.2139/ssrn.5319520</a></p>\n\n<p>These works explore how structure generates authority in automated systems. The new paper applies that lens to corporate software, showing how formal misalignment becomes embedded in everyday workflows.</p>\n\n<p><strong>6. Call to Action</strong><br />\nThe full article Expense Coding Syntax: Misclassification in AI-Powered Corporate ERPs will be published shortly. You will find it on Zenodo, SSRN, Figshare, and AI &amp; Power Discourse Quarterly.</p>\n\n<p>To receive early access, follow:</p>\n\n<p><strong>Website</strong><br />\n<a href=\"https://www.agustinvstartari.com/\" rel=\"noopener noreferrer\">https://www.agustinvstartari.com/</a></p>\n\n<p><strong>Zenodo profile</strong><br />\n<a href=\"https://zenodo.org/records/16044858\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a></p>\n\n<p><strong>SSRN Author Page</strong><br />\n<a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p>You may also subscribe on Dev.to, HackerNoon, or Medium to follow the ongoing Syntactic Authority series.</p>\n\n<p><strong>7. Author and Ethos</strong><br />\nAgustin V. Startari<br />\nAuthor, Linguist, Researcher<br />\n<strong>ORCID:</strong> <a href=\"https://orcid.org/0000-0002-8587-4411\" rel=\"noopener noreferrer\">https://orcid.org/0000-0002-8587-4411</a><br />\n<strong>Researcher ID:</strong> K-5792-2016<br />\n<strong>Zenodo:</strong> <a href=\"https://zenodo.org/communities/aipdq/\" rel=\"noopener noreferrer\">https://zenodo.org/records/16044858</a><br />\n*<em>SSRN: *</em><a href=\"https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915\" rel=\"noopener noreferrer\">https://papers.ssrn.com/sol3/cf_dev/AbsByAuth.cfm?per_id=7639915</a></p>\n\n<p><strong>Ethos</strong><br />\nI do not use artificial intelligence to write what I don\u2019t know. I use it to challenge what I do. I write to reclaim the voice in an age of automated neutrality. My work is not outsourced. It is authored.</p>"
        }
      },
      "ai_reasoning": "unclear response: <|assistant|> no, because although it discusses generative models which are related to ai, its focus is more about misclassification issues in business transactions rather than artificial intelligence breakthroughs, companies like openai and anthropic, automation"
    },
    {
      "title": "He Had Dangerous Delusions. ChatGPT Admitted It Made Them Worse. | ChatGPT told Jacob Irwin he had achieved the ability to bend time.",
      "link": "https://www.reddit.com/r/technology/comments/1m5fcyj/he_had_dangerous_delusions_chatgpt_admitted_it/",
      "summary": "submitted by /u/MetaKnowing [link] [comments]",
      "summary_original": "submitted by /u/MetaKnowing [link] [comments]",
      "summary_html": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/MetaKnowing\"> /u/MetaKnowing </a> <br /> <span><a href=\"https://www.wsj.com/tech/ai/chatgpt-chatbot-psychology-manic-episodes-57452d14\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/technology/comments/1m5fcyj/he_had_dangerous_delusions_chatgpt_admitted_it/\">[comments]</a></span>",
      "is_html_summary": true,
      "has_llm_summary": false,
      "from_feed": "https://www.reddit.com/r/technology/.rss",
      "published_parsed": [
        2025,
        7,
        21,
        10,
        30,
        20,
        0,
        202,
        0
      ],
      "published": "2025-07-21T10:30:20+00:00",
      "matched_keywords": [
        "chatbot",
        "chatgpt"
      ],
      "keyword_matches": {
        "chatbot": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/MetaKnowing\"> /u/MetaKnowing </a> <br /> <span><a href=\"https://www.wsj.com/tech/ai/chatgpt-chatbot-psychology-manic-episodes-57452d14\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/technology/comments/1m5fcyj/he_had_dangerous_delusions_chatgpt_admitted_it/\">[comments]</a></span>"
        },
        "chatgpt": {
          "found_in": [
            "title",
            "summary"
          ],
          "title_text": "He Had Dangerous Delusions. ChatGPT Admitted It Made Them Worse. | ChatGPT told Jacob Irwin he had achieved the ability to bend time.",
          "summary_text": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/MetaKnowing\"> /u/MetaKnowing </a> <br /> <span><a href=\"https://www.wsj.com/tech/ai/chatgpt-chatbot-psychology-manic-episodes-57452d14\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/technology/comments/1m5fcyj/he_had_dangerous_delusions_chatgpt_admitted_it/\">[comments]</a></span>"
        }
      },
      "ai_reasoning": "unclear response: begin your answer explicitly with \"yes,\" and use no more than two sentences for your explanation<|end|><|assistant|> yes, because the article discusses chatgpt's capabilities related to artificial intelligence functions such as bending time, which falls under ai"
    },
    {
      "title": "Implementing A Dynamic Grid With With Slicing",
      "link": "https://dev.to/msharifhub/implementing-a-dynamic-grid-with-with-slicing-4f3j",
      "summary": "A dynamic grid is needed for a video interface that adjusts to display videos in one row with variable columns based on available width.",
      "summary_original": "Here we have a problem: How to implement a grid that displays a single row and the number of columns should be based on a predetermined number that corresponds to the dynamic change of the winner width. Or a more better explanation is that the items being rendered should fit within the html node and displayed as single row but number of items to be rendered should be based on the size of the width. Each single item should have the same width and height and it should have a 16/9 (video caption). I will explain this functionality giving an example of an interface you might encounter either using Netflix or youtube. So, we want have 1 row where we display this history of videos the user watched. The display should be only 1 row. Below is a screen shot of what we want to implement What happens if we do not control the number of items to be displayed ? So lets try out: In this example, I will be using React-TypeScript and TailwindCSS. Supposedly we grab our array of items and we map the array on a div. If we set as a flex row, depending on how many items you have, it will shrink so all items can fit. <div className=\"flex flex-row\"> {loading && <SpinningCircle />} {videosWatched.length > 0 && !loading && !error && videosWatched.map((video) => ( <div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full gap-4 rounded overflow-hidden\"> <div className=\"aspect-video\"> <img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /> </div> <div> {sliceText({ s: video.title })}</div> </div> ))} </div> we can not set a height or width for the div that controls height and width of the thumbnails because if we do so then elements will collapse. Using the aspect video class it will increase the width as the window.innerWidth gets larger. the problem is we rendering all and when the inner.width for example is below < 480px and we have many items, it will shrink. we could simply set a height and width and would null out the aspect video and use the overflow-x-scroll class provided by TailwindCss. That way we would have a fixed size and user could scroll. But thats not what we want. The UI should maintain an aspect video and when the window.innerWidth gets smaller we want to display a certain number of videos so we still maintain a predetermined size handled by the aspect video class. If we slice the array to only 2 items when the inner width is for example less than 480 pixel we can get an idea of each item being rendered <div className=\"flex flex-row\"> {loading && <SpinningCircle />} {videosWatched.length > 0 && !loading && !error && videosWatched.slice(0,2).map((video) => ( <div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full gap-4 rounded overflow-hidden\"> <div className=\"aspect-video\"> <img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /> </div> <div> {sliceText({ s: video.title })}</div> </div> ))} </div> ![ ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1emd3dxxookrnnrypoi.png) Here we are splitting evenly the positive space of the parent component to each item. if we increase the window inner width, we want more items to be rendered. In this case, at full width of the innerWidth we would want 5 items to be displayed. The question is how can we do so while preventing from capturing every time user changes the width to make the application more optimal. One thing comes in mind is using a throttle function. Using a throttle function we can prevent the event listener from being triggered multiple times. In addition, we could have an object with key and values where a key is the size of the width and the value is number of items to display. export const videosPerRowDisplayValues = { display_less_480: 1, display_481_699: 2, display_700_899: 2, display_900_1124: 3, display_1125_1420: 3, display_1421_1739: 4, display_1740_1920: 5, display_full: 5, }; with the object in place, we could pass as a prop to a hook where we would have a function that will call the window event listener for the inner width import { useEffect, useState } from 'react'; import { useThrottle } from './useThrottle.ts'; interface VideoGridProps { display_less_480?: number; display_481_699?: number; display_700_899?: number; display_900_1124?: number; display_1125_1420?: number; display_1421_1739?: number; display_1740_1920?: number; display_full?: number; } function getVideosPerRowFromWidth(props: VideoGridProps, width: number): number { const { display_less_480, display_481_699, display_700_899, display_900_1124, display_1125_1420, display_1421_1739, display_1740_1920, display_full } = props; if (width <= 480) return display_less_480 ?? 1; if (width >= 481 && width <= 699) return display_481_699 ?? 1; if (width >= 700 && width <= 899) return display_700_899 ?? 2; if (width >= 900 && width <= 1124) return display_900_1124 ?? 3; if (width >= 1125 && width <= 1420) return display_1125_1420 ?? 3; if (width >= 1421 && width <= 1739) return display_1421_1739 ?? 4; if (width >= 1740 && width <= 1920) return display_1740_1920 ?? 5; return display_full ?? 5; } export const useVideoGrid = (props: VideoGridProps): number => { const [videosPerRow, setVideosPerRow] = useState<number>(() => (typeof window !== 'undefined' ? getVideosPerRowFromWidth(props, window.innerWidth) : (props.display_full ?? 1))); const determineVideosToShow = () => { setVideosPerRow(getVideosPerRowFromWidth(props, window.innerWidth)); }; const throttleVideosToShowPerRow = useThrottle(determineVideosToShow, 50); useEffect(() => { const handleVideosToShow = () => { throttleVideosToShowPerRow(); }; window.addEventListener('resize', handleVideosToShow); return () => window.removeEventListener('resize', handleVideosToShow); }, [throttleVideosToShowPerRow]); return videosPerRow; }; import { useRef } from 'react'; export const useThrottle = <T extends (...args: any[]) => void>(callBack: T, interval: number) => { const lastExecuted = useRef<number>(0); return (...args: Parameters<T>) => { const now = Date.now(); if (now - lastExecuted.current < interval) return; lastExecuted.current = now; return callBack(...args); }; }; We pass the object as a prop and we have a helper function that takes 2 parameters: the object with the predetermined values for the width and the actual window width. Based on the condition statement we return a value. Fall back is 5 items. the custom hook useThrottle returns the call back function. Here we wrapping in another function that wraps the determinedVideosToShow callback. We then call the function in the useEffect and use as a dependency; That way, it will be called whenever we have a new value and the call back is only triggered within the interval declared in the throttle hook. Returning back to our component we now can use the value returned by the hook const videosPerRow = useVideoGrid(videosPerRowDisplayValues); <div className=\"grid grid-flow-col gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}> We now using a dynamic value to change the number of columns. This will handle different width and devices Finally, we need now to implement the slicing logic. Supposedly we an array and the length of array does not matter but as the value not to go out of boundary. We starting from index 0 and what should be the end index ? Well, we know that the end index it should not be more than the length of array. If it is we simply return. If we use start index + videosPerRow we get the following EndIndex:= StartIndex + VideosPerRow if start index is 0 and videos per row is 1 then start index will be 0 and end index will be one. So, we will be sliding one video at the time. Then we move the previous value of start index to the index of the endIndex and the end index to the value of the start index + VideosPer Row. That way, when we increment we will have a window slide of 1 video. And the slide depth will change accordingly to the number of videosPerRow const [startIndex, setStartIndex] = useState<number>(0); const handleScrollUp = () => { if (startIndex + videosPerRow >= videosWatched.length) return; setStartIndex(startIndex + videosPerRow); }; const handleScrollDown = () => { if (startIndex - videosPerRow < 0) return; setStartIndex(startIndex - videosPerRow); }; <div className=\"grid grid-flow-col gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}> {loading && <SpinningCircle />} {videosWatched.length > 0 && !loading && !error && videosWatched.slice(startIndex, startIndex + videosPerRow).map((video) => ( <div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full gap-4 rounded overflow-hidden\"> <div className=\"aspect-video\"> <img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /> </div> <div> {sliceText({ s: video.title })}</div> </div> ))} </div> That resolves our problem and it allow us to slide through the content while maintaining an appealing interface and keeping the code optimal. About Me: I am Mohamed Sharif and I have an undergraduate degree in computer science from San Francisco State University. I am currently starting a master degree towards machine learning and artificial intelligence through Drexel University. Since graduation I started to focus on full stack development. I enjoy writing blogs and currently implementing a full stack clone of youtube application. I reside in the San Francisco Bay area near silicon valley. I am open full full stack development roles. If you would like to connect, send me an invite on linkedin. My Linkedin Account",
      "summary_html": "<p>Here we have a problem: How to implement a  grid that displays a single row and the number of  columns should be based on a predetermined number that corresponds to the dynamic change of the winner width. Or a more better explanation is that the items being rendered should fit within the  html node  and displayed as single row but number of items to be rendered should be based on the size of the width. Each single item should have the same width and height and it should have a 16/9 (video caption).</p>\n\n<p>I will explain this functionality giving an example  of an interface  you might encounter either using Netflix or youtube. So, we want have 1 row where we display this history of videos the user watched.  The display should be only 1 row. Below is a screen shot of what we want to implement</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzqtwvd3suvnpmtzn5lz8.png\"><img alt=\" \" height=\"253\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzqtwvd3suvnpmtzn5lz8.png\" width=\"800\" /></a></p>\n\n<p>What happens if we do not control the number of items to be displayed ?</p>\n\n<p>So lets try out:</p>\n\n<p>In this example, I will be using React-TypeScript and TailwindCSS. Supposedly we grab our array of items and we map the array on a div. If we set as a flex row, depending on how many items you have, it will shrink so all items can fit.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n    &lt;div className=\"flex flex-row\"&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu4i81x3pxmhaxzvh3p8y.png\"><img alt=\" \" height=\"457\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu4i81x3pxmhaxzvh3p8y.png\" width=\"800\" /></a></p>\n\n<p>we can not set a height or width for the div that controls  height and width of the thumbnails because if we do so then elements will collapse. Using the aspect video class it will increase the width  as the window.innerWidth gets larger. the problem is we rendering all  and when the inner.width for example is below &lt; 480px and we have many items, it will shrink. we could simply set a height and width and would null out the aspect video and use the  overflow-x-scroll class provided by TailwindCss.  That way we would have a fixed size and user could scroll. But thats not what we want.  The UI should maintain an aspect video and when the window.innerWidth  gets smaller we want to display a certain number of videos so we still maintain a predetermined size handled by the aspect video class. If we slice the array to only 2 items when the inner width is for example less than 480 pixel we can get an idea of each item being rendered<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n &lt;div className=\"flex flex-row\"&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.slice(0,2).map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n![ ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1emd3dxxookrnnrypoi.png)\n\n\n</code></pre>\n\n</div>\n\n\n\n<p>Here we are splitting evenly the positive space of the parent component to each item. if we increase the window inner width, we want more items to be rendered. In this case, at full width of the innerWidth we would want 5 items to be displayed.</p>\n\n<p>The question is how can we do so while preventing from capturing every time user changes the width to make the application more optimal. One thing comes in mind is using a throttle function. Using a throttle function we can  prevent the event listener from being triggered multiple times. In addition, we could have an object with key and values where a key is the size of the width and the value is number of items to display.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export const videosPerRowDisplayValues = {\n  display_less_480: 1,\n  display_481_699: 2,\n  display_700_899: 2,\n  display_900_1124: 3,\n  display_1125_1420: 3,\n  display_1421_1739: 4,\n  display_1740_1920: 5,\n  display_full: 5,\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>with the object in place, we could pass as a prop to a hook where we would have a function that will call the window event listener for the inner width<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nimport { useEffect, useState } from 'react';\nimport { useThrottle } from './useThrottle.ts';\n\ninterface VideoGridProps {\n  display_less_480?: number;\n  display_481_699?: number;\n  display_700_899?: number;\n  display_900_1124?: number;\n  display_1125_1420?: number;\n  display_1421_1739?: number;\n  display_1740_1920?: number;\n  display_full?: number;\n}\n\nfunction getVideosPerRowFromWidth(props: VideoGridProps, width: number): number {\n  const { display_less_480, display_481_699, display_700_899, display_900_1124, display_1125_1420, display_1421_1739, display_1740_1920, display_full } = props;\n\n  if (width &lt;= 480) return display_less_480 ?? 1;\n  if (width &gt;= 481 &amp;&amp; width &lt;= 699) return display_481_699 ?? 1;\n  if (width &gt;= 700 &amp;&amp; width &lt;= 899) return display_700_899 ?? 2;\n  if (width &gt;= 900 &amp;&amp; width &lt;= 1124) return display_900_1124 ?? 3;\n  if (width &gt;= 1125 &amp;&amp; width &lt;= 1420) return display_1125_1420 ?? 3;\n  if (width &gt;= 1421 &amp;&amp; width &lt;= 1739) return display_1421_1739 ?? 4;\n  if (width &gt;= 1740 &amp;&amp; width &lt;= 1920) return display_1740_1920 ?? 5;\n  return display_full ?? 5;\n}\n\nexport const useVideoGrid = (props: VideoGridProps): number =&gt; {\n  const [videosPerRow, setVideosPerRow] = useState&lt;number&gt;(() =&gt; (typeof window !== 'undefined' ? getVideosPerRowFromWidth(props, window.innerWidth) : (props.display_full ?? 1)));\n\n  const determineVideosToShow = () =&gt; {\n    setVideosPerRow(getVideosPerRowFromWidth(props, window.innerWidth));\n  };\n\n  const throttleVideosToShowPerRow = useThrottle(determineVideosToShow, 50);\n\n  useEffect(() =&gt; {\n    const handleVideosToShow = () =&gt; {\n      throttleVideosToShowPerRow();\n    };\n\n    window.addEventListener('resize', handleVideosToShow);\n    return () =&gt; window.removeEventListener('resize', handleVideosToShow);\n  }, [throttleVideosToShowPerRow]);\n\n  return videosPerRow;\n};\n\n\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useRef } from 'react';\n\nexport const useThrottle = &lt;T extends (...args: any[]) =&gt; void&gt;(callBack: T, interval: number) =&gt; {\n  const lastExecuted = useRef&lt;number&gt;(0);\n\n  return (...args: Parameters&lt;T&gt;) =&gt; {\n    const now = Date.now();\n\n    if (now - lastExecuted.current &lt; interval) return;\n\n    lastExecuted.current = now;\n\n    return callBack(...args);\n  };\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>We pass the object as a prop and we have a helper function that takes 2 parameters: the object  with the predetermined values for the width and the actual window width. Based on the condition statement we return a value. Fall back is 5 items.</p>\n\n<p>the custom hook useThrottle returns the call back  function. Here we wrapping in another function that wraps the determinedVideosToShow callback. We then call the function in the useEffect and use as a dependency; That way, it will be called whenever we have  a new value and the call back is only triggered within the interval declared in the throttle hook.</p>\n\n<p>Returning back to our component   we now can use the value returned by the hook<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const videosPerRow = useVideoGrid(videosPerRowDisplayValues);\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    &lt;div className=\"grid grid-flow-col  gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>We now using a dynamic value to change the number of columns.</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3ktaj67hj2a4yah42lb8.png\"><img alt=\" \" height=\"521\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3ktaj67hj2a4yah42lb8.png\" width=\"800\" /></a></p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8e76rhxvsrf17v9nirev.png\"><img alt=\" \" height=\"564\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8e76rhxvsrf17v9nirev.png\" width=\"800\" /></a></p>\n\n<p>This will handle different width and devices</p>\n\n<p>Finally, we need now to implement the slicing logic. Supposedly we an array and the length of array does not matter but as the value not to go out of boundary. We starting from index 0 and what should be the end index ? Well, we know that the end index it should not be more than the length of array. If it is we simply return. If we use start index + videosPerRow we get the following</p>\n\n<p><strong>EndIndex:= StartIndex + VideosPerRow</strong></p>\n\n<p>if start index is 0 and videos per row is 1 then start index will be 0 and end index will be one. So, we will be sliding one video at the time. Then we move the previous value of start index to the index of the endIndex and the end index to the value of the start index + VideosPer Row. That way, when we increment we will have a window slide of 1 video. And the slide depth will change accordingly to the number of videosPerRow<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const [startIndex, setStartIndex] = useState&lt;number&gt;(0);\n\n  const handleScrollUp = () =&gt; {\n    if (startIndex + videosPerRow &gt;= videosWatched.length) return;\n\n    setStartIndex(startIndex + videosPerRow);\n  };\n\n  const handleScrollDown = () =&gt; {\n    if (startIndex - videosPerRow &lt; 0) return;\n    setStartIndex(startIndex - videosPerRow);\n  };\n\n\n      &lt;div className=\"grid grid-flow-col  gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.slice(startIndex, startIndex + videosPerRow).map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n\n</code></pre>\n\n</div>\n\n\n\n<p>That resolves our problem and it allow us to slide through the content while maintaining an appealing interface and keeping the code optimal.</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrbhokcnokji99j85maf.png\"><img alt=\" \" height=\"497\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrbhokcnokji99j85maf.png\" width=\"800\" /></a></p>\n\n<p>About Me:</p>\n\n<p>I am Mohamed Sharif and I have an undergraduate degree in computer science from San Francisco State University. I am currently starting a master degree towards machine learning and artificial intelligence through Drexel University. Since graduation I started to focus on full stack development. I enjoy writing blogs and currently implementing a full stack clone of youtube application. I reside in the San Francisco Bay area near silicon valley. I am open full full stack development roles. If you would like to connect, send me an invite on linkedin.</p>\n\n<p><a href=\"https://www.linkedin.com/in/mohamed-sharif-47301520b/\" rel=\"noopener noreferrer\">My Linkedin Account</a></p>",
      "is_html_summary": true,
      "has_llm_summary": true,
      "from_feed": "https://dev.to/feed/tag/react",
      "published_parsed": [
        2025,
        7,
        21,
        7,
        30,
        5,
        0,
        202,
        0
      ],
      "published": "Mon, 21 Jul 2025 07:30:05 +0000",
      "matched_keywords": [
        "artificial intelligence",
        "machine learning"
      ],
      "keyword_matches": {
        "artificial intelligence": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "<p>Here we have a problem: How to implement a  grid that displays a single row and the number of  columns should be based on a predetermined number that corresponds to the dynamic change of the winner width. Or a more better explanation is that the items being rendered should fit within the  html node  and displayed as single row but number of items to be rendered should be based on the size of the width. Each single item should have the same width and height and it should have a 16/9 (video caption).</p>\n\n<p>I will explain this functionality giving an example  of an interface  you might encounter either using Netflix or youtube. So, we want have 1 row where we display this history of videos the user watched.  The display should be only 1 row. Below is a screen shot of what we want to implement</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzqtwvd3suvnpmtzn5lz8.png\"><img alt=\" \" height=\"253\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzqtwvd3suvnpmtzn5lz8.png\" width=\"800\" /></a></p>\n\n<p>What happens if we do not control the number of items to be displayed ?</p>\n\n<p>So lets try out:</p>\n\n<p>In this example, I will be using React-TypeScript and TailwindCSS. Supposedly we grab our array of items and we map the array on a div. If we set as a flex row, depending on how many items you have, it will shrink so all items can fit.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n    &lt;div className=\"flex flex-row\"&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu4i81x3pxmhaxzvh3p8y.png\"><img alt=\" \" height=\"457\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu4i81x3pxmhaxzvh3p8y.png\" width=\"800\" /></a></p>\n\n<p>we can not set a height or width for the div that controls  height and width of the thumbnails because if we do so then elements will collapse. Using the aspect video class it will increase the width  as the window.innerWidth gets larger. the problem is we rendering all  and when the inner.width for example is below &lt; 480px and we have many items, it will shrink. we could simply set a height and width and would null out the aspect video and use the  overflow-x-scroll class provided by TailwindCss.  That way we would have a fixed size and user could scroll. But thats not what we want.  The UI should maintain an aspect video and when the window.innerWidth  gets smaller we want to display a certain number of videos so we still maintain a predetermined size handled by the aspect video class. If we slice the array to only 2 items when the inner width is for example less than 480 pixel we can get an idea of each item being rendered<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n &lt;div className=\"flex flex-row\"&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.slice(0,2).map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n![ ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1emd3dxxookrnnrypoi.png)\n\n\n</code></pre>\n\n</div>\n\n\n\n<p>Here we are splitting evenly the positive space of the parent component to each item. if we increase the window inner width, we want more items to be rendered. In this case, at full width of the innerWidth we would want 5 items to be displayed.</p>\n\n<p>The question is how can we do so while preventing from capturing every time user changes the width to make the application more optimal. One thing comes in mind is using a throttle function. Using a throttle function we can  prevent the event listener from being triggered multiple times. In addition, we could have an object with key and values where a key is the size of the width and the value is number of items to display.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export const videosPerRowDisplayValues = {\n  display_less_480: 1,\n  display_481_699: 2,\n  display_700_899: 2,\n  display_900_1124: 3,\n  display_1125_1420: 3,\n  display_1421_1739: 4,\n  display_1740_1920: 5,\n  display_full: 5,\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>with the object in place, we could pass as a prop to a hook where we would have a function that will call the window event listener for the inner width<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nimport { useEffect, useState } from 'react';\nimport { useThrottle } from './useThrottle.ts';\n\ninterface VideoGridProps {\n  display_less_480?: number;\n  display_481_699?: number;\n  display_700_899?: number;\n  display_900_1124?: number;\n  display_1125_1420?: number;\n  display_1421_1739?: number;\n  display_1740_1920?: number;\n  display_full?: number;\n}\n\nfunction getVideosPerRowFromWidth(props: VideoGridProps, width: number): number {\n  const { display_less_480, display_481_699, display_700_899, display_900_1124, display_1125_1420, display_1421_1739, display_1740_1920, display_full } = props;\n\n  if (width &lt;= 480) return display_less_480 ?? 1;\n  if (width &gt;= 481 &amp;&amp; width &lt;= 699) return display_481_699 ?? 1;\n  if (width &gt;= 700 &amp;&amp; width &lt;= 899) return display_700_899 ?? 2;\n  if (width &gt;= 900 &amp;&amp; width &lt;= 1124) return display_900_1124 ?? 3;\n  if (width &gt;= 1125 &amp;&amp; width &lt;= 1420) return display_1125_1420 ?? 3;\n  if (width &gt;= 1421 &amp;&amp; width &lt;= 1739) return display_1421_1739 ?? 4;\n  if (width &gt;= 1740 &amp;&amp; width &lt;= 1920) return display_1740_1920 ?? 5;\n  return display_full ?? 5;\n}\n\nexport const useVideoGrid = (props: VideoGridProps): number =&gt; {\n  const [videosPerRow, setVideosPerRow] = useState&lt;number&gt;(() =&gt; (typeof window !== 'undefined' ? getVideosPerRowFromWidth(props, window.innerWidth) : (props.display_full ?? 1)));\n\n  const determineVideosToShow = () =&gt; {\n    setVideosPerRow(getVideosPerRowFromWidth(props, window.innerWidth));\n  };\n\n  const throttleVideosToShowPerRow = useThrottle(determineVideosToShow, 50);\n\n  useEffect(() =&gt; {\n    const handleVideosToShow = () =&gt; {\n      throttleVideosToShowPerRow();\n    };\n\n    window.addEventListener('resize', handleVideosToShow);\n    return () =&gt; window.removeEventListener('resize', handleVideosToShow);\n  }, [throttleVideosToShowPerRow]);\n\n  return videosPerRow;\n};\n\n\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useRef } from 'react';\n\nexport const useThrottle = &lt;T extends (...args: any[]) =&gt; void&gt;(callBack: T, interval: number) =&gt; {\n  const lastExecuted = useRef&lt;number&gt;(0);\n\n  return (...args: Parameters&lt;T&gt;) =&gt; {\n    const now = Date.now();\n\n    if (now - lastExecuted.current &lt; interval) return;\n\n    lastExecuted.current = now;\n\n    return callBack(...args);\n  };\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>We pass the object as a prop and we have a helper function that takes 2 parameters: the object  with the predetermined values for the width and the actual window width. Based on the condition statement we return a value. Fall back is 5 items.</p>\n\n<p>the custom hook useThrottle returns the call back  function. Here we wrapping in another function that wraps the determinedVideosToShow callback. We then call the function in the useEffect and use as a dependency; That way, it will be called whenever we have  a new value and the call back is only triggered within the interval declared in the throttle hook.</p>\n\n<p>Returning back to our component   we now can use the value returned by the hook<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const videosPerRow = useVideoGrid(videosPerRowDisplayValues);\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    &lt;div className=\"grid grid-flow-col  gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>We now using a dynamic value to change the number of columns.</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3ktaj67hj2a4yah42lb8.png\"><img alt=\" \" height=\"521\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3ktaj67hj2a4yah42lb8.png\" width=\"800\" /></a></p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8e76rhxvsrf17v9nirev.png\"><img alt=\" \" height=\"564\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8e76rhxvsrf17v9nirev.png\" width=\"800\" /></a></p>\n\n<p>This will handle different width and devices</p>\n\n<p>Finally, we need now to implement the slicing logic. Supposedly we an array and the length of array does not matter but as the value not to go out of boundary. We starting from index 0 and what should be the end index ? Well, we know that the end index it should not be more than the length of array. If it is we simply return. If we use start index + videosPerRow we get the following</p>\n\n<p><strong>EndIndex:= StartIndex + VideosPerRow</strong></p>\n\n<p>if start index is 0 and videos per row is 1 then start index will be 0 and end index will be one. So, we will be sliding one video at the time. Then we move the previous value of start index to the index of the endIndex and the end index to the value of the start index + VideosPer Row. That way, when we increment we will have a window slide of 1 video. And the slide depth will change accordingly to the number of videosPerRow<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const [startIndex, setStartIndex] = useState&lt;number&gt;(0);\n\n  const handleScrollUp = () =&gt; {\n    if (startIndex + videosPerRow &gt;= videosWatched.length) return;\n\n    setStartIndex(startIndex + videosPerRow);\n  };\n\n  const handleScrollDown = () =&gt; {\n    if (startIndex - videosPerRow &lt; 0) return;\n    setStartIndex(startIndex - videosPerRow);\n  };\n\n\n      &lt;div className=\"grid grid-flow-col  gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.slice(startIndex, startIndex + videosPerRow).map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n\n</code></pre>\n\n</div>\n\n\n\n<p>That resolves our problem and it allow us to slide through the content while maintaining an appealing interface and keeping the code optimal.</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrbhokcnokji99j85maf.png\"><img alt=\" \" height=\"497\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrbhokcnokji99j85maf.png\" width=\"800\" /></a></p>\n\n<p>About Me:</p>\n\n<p>I am Mohamed Sharif and I have an undergraduate degree in computer science from San Francisco State University. I am currently starting a master degree towards machine learning and artificial intelligence through Drexel University. Since graduation I started to focus on full stack development. I enjoy writing blogs and currently implementing a full stack clone of youtube application. I reside in the San Francisco Bay area near silicon valley. I am open full full stack development roles. If you would like to connect, send me an invite on linkedin.</p>\n\n<p><a href=\"https://www.linkedin.com/in/mohamed-sharif-47301520b/\" rel=\"noopener noreferrer\">My Linkedin Account</a></p>"
        },
        "machine learning": {
          "found_in": [
            "summary"
          ],
          "title_text": null,
          "summary_text": "<p>Here we have a problem: How to implement a  grid that displays a single row and the number of  columns should be based on a predetermined number that corresponds to the dynamic change of the winner width. Or a more better explanation is that the items being rendered should fit within the  html node  and displayed as single row but number of items to be rendered should be based on the size of the width. Each single item should have the same width and height and it should have a 16/9 (video caption).</p>\n\n<p>I will explain this functionality giving an example  of an interface  you might encounter either using Netflix or youtube. So, we want have 1 row where we display this history of videos the user watched.  The display should be only 1 row. Below is a screen shot of what we want to implement</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzqtwvd3suvnpmtzn5lz8.png\"><img alt=\" \" height=\"253\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzqtwvd3suvnpmtzn5lz8.png\" width=\"800\" /></a></p>\n\n<p>What happens if we do not control the number of items to be displayed ?</p>\n\n<p>So lets try out:</p>\n\n<p>In this example, I will be using React-TypeScript and TailwindCSS. Supposedly we grab our array of items and we map the array on a div. If we set as a flex row, depending on how many items you have, it will shrink so all items can fit.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n    &lt;div className=\"flex flex-row\"&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu4i81x3pxmhaxzvh3p8y.png\"><img alt=\" \" height=\"457\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fu4i81x3pxmhaxzvh3p8y.png\" width=\"800\" /></a></p>\n\n<p>we can not set a height or width for the div that controls  height and width of the thumbnails because if we do so then elements will collapse. Using the aspect video class it will increase the width  as the window.innerWidth gets larger. the problem is we rendering all  and when the inner.width for example is below &lt; 480px and we have many items, it will shrink. we could simply set a height and width and would null out the aspect video and use the  overflow-x-scroll class provided by TailwindCss.  That way we would have a fixed size and user could scroll. But thats not what we want.  The UI should maintain an aspect video and when the window.innerWidth  gets smaller we want to display a certain number of videos so we still maintain a predetermined size handled by the aspect video class. If we slice the array to only 2 items when the inner width is for example less than 480 pixel we can get an idea of each item being rendered<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n &lt;div className=\"flex flex-row\"&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.slice(0,2).map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n![ ](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1emd3dxxookrnnrypoi.png)\n\n\n</code></pre>\n\n</div>\n\n\n\n<p>Here we are splitting evenly the positive space of the parent component to each item. if we increase the window inner width, we want more items to be rendered. In this case, at full width of the innerWidth we would want 5 items to be displayed.</p>\n\n<p>The question is how can we do so while preventing from capturing every time user changes the width to make the application more optimal. One thing comes in mind is using a throttle function. Using a throttle function we can  prevent the event listener from being triggered multiple times. In addition, we could have an object with key and values where a key is the size of the width and the value is number of items to display.<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export const videosPerRowDisplayValues = {\n  display_less_480: 1,\n  display_481_699: 2,\n  display_700_899: 2,\n  display_900_1124: 3,\n  display_1125_1420: 3,\n  display_1421_1739: 4,\n  display_1740_1920: 5,\n  display_full: 5,\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>with the object in place, we could pass as a prop to a hook where we would have a function that will call the window event listener for the inner width<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nimport { useEffect, useState } from 'react';\nimport { useThrottle } from './useThrottle.ts';\n\ninterface VideoGridProps {\n  display_less_480?: number;\n  display_481_699?: number;\n  display_700_899?: number;\n  display_900_1124?: number;\n  display_1125_1420?: number;\n  display_1421_1739?: number;\n  display_1740_1920?: number;\n  display_full?: number;\n}\n\nfunction getVideosPerRowFromWidth(props: VideoGridProps, width: number): number {\n  const { display_less_480, display_481_699, display_700_899, display_900_1124, display_1125_1420, display_1421_1739, display_1740_1920, display_full } = props;\n\n  if (width &lt;= 480) return display_less_480 ?? 1;\n  if (width &gt;= 481 &amp;&amp; width &lt;= 699) return display_481_699 ?? 1;\n  if (width &gt;= 700 &amp;&amp; width &lt;= 899) return display_700_899 ?? 2;\n  if (width &gt;= 900 &amp;&amp; width &lt;= 1124) return display_900_1124 ?? 3;\n  if (width &gt;= 1125 &amp;&amp; width &lt;= 1420) return display_1125_1420 ?? 3;\n  if (width &gt;= 1421 &amp;&amp; width &lt;= 1739) return display_1421_1739 ?? 4;\n  if (width &gt;= 1740 &amp;&amp; width &lt;= 1920) return display_1740_1920 ?? 5;\n  return display_full ?? 5;\n}\n\nexport const useVideoGrid = (props: VideoGridProps): number =&gt; {\n  const [videosPerRow, setVideosPerRow] = useState&lt;number&gt;(() =&gt; (typeof window !== 'undefined' ? getVideosPerRowFromWidth(props, window.innerWidth) : (props.display_full ?? 1)));\n\n  const determineVideosToShow = () =&gt; {\n    setVideosPerRow(getVideosPerRowFromWidth(props, window.innerWidth));\n  };\n\n  const throttleVideosToShowPerRow = useThrottle(determineVideosToShow, 50);\n\n  useEffect(() =&gt; {\n    const handleVideosToShow = () =&gt; {\n      throttleVideosToShowPerRow();\n    };\n\n    window.addEventListener('resize', handleVideosToShow);\n    return () =&gt; window.removeEventListener('resize', handleVideosToShow);\n  }, [throttleVideosToShowPerRow]);\n\n  return videosPerRow;\n};\n\n\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useRef } from 'react';\n\nexport const useThrottle = &lt;T extends (...args: any[]) =&gt; void&gt;(callBack: T, interval: number) =&gt; {\n  const lastExecuted = useRef&lt;number&gt;(0);\n\n  return (...args: Parameters&lt;T&gt;) =&gt; {\n    const now = Date.now();\n\n    if (now - lastExecuted.current &lt; interval) return;\n\n    lastExecuted.current = now;\n\n    return callBack(...args);\n  };\n};\n\n</code></pre>\n\n</div>\n\n\n\n<p>We pass the object as a prop and we have a helper function that takes 2 parameters: the object  with the predetermined values for the width and the actual window width. Based on the condition statement we return a value. Fall back is 5 items.</p>\n\n<p>the custom hook useThrottle returns the call back  function. Here we wrapping in another function that wraps the determinedVideosToShow callback. We then call the function in the useEffect and use as a dependency; That way, it will be called whenever we have  a new value and the call back is only triggered within the interval declared in the throttle hook.</p>\n\n<p>Returning back to our component   we now can use the value returned by the hook<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const videosPerRow = useVideoGrid(videosPerRowDisplayValues);\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    &lt;div className=\"grid grid-flow-col  gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<p>We now using a dynamic value to change the number of columns.</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3ktaj67hj2a4yah42lb8.png\"><img alt=\" \" height=\"521\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3ktaj67hj2a4yah42lb8.png\" width=\"800\" /></a></p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8e76rhxvsrf17v9nirev.png\"><img alt=\" \" height=\"564\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8e76rhxvsrf17v9nirev.png\" width=\"800\" /></a></p>\n\n<p>This will handle different width and devices</p>\n\n<p>Finally, we need now to implement the slicing logic. Supposedly we an array and the length of array does not matter but as the value not to go out of boundary. We starting from index 0 and what should be the end index ? Well, we know that the end index it should not be more than the length of array. If it is we simply return. If we use start index + videosPerRow we get the following</p>\n\n<p><strong>EndIndex:= StartIndex + VideosPerRow</strong></p>\n\n<p>if start index is 0 and videos per row is 1 then start index will be 0 and end index will be one. So, we will be sliding one video at the time. Then we move the previous value of start index to the index of the endIndex and the end index to the value of the start index + VideosPer Row. That way, when we increment we will have a window slide of 1 video. And the slide depth will change accordingly to the number of videosPerRow<br />\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>  const [startIndex, setStartIndex] = useState&lt;number&gt;(0);\n\n  const handleScrollUp = () =&gt; {\n    if (startIndex + videosPerRow &gt;= videosWatched.length) return;\n\n    setStartIndex(startIndex + videosPerRow);\n  };\n\n  const handleScrollDown = () =&gt; {\n    if (startIndex - videosPerRow &lt; 0) return;\n    setStartIndex(startIndex - videosPerRow);\n  };\n\n\n      &lt;div className=\"grid grid-flow-col  gap-4\" style={{ gridTemplateColumns: `repeat(${videosPerRow}, 1fr) ` }}&gt;\n          {loading &amp;&amp; &lt;SpinningCircle /&gt;}\n          {videosWatched.length &gt; 0 &amp;&amp;\n            !loading &amp;&amp;\n            !error &amp;&amp;\n            videosWatched.slice(startIndex, startIndex + videosPerRow).map((video) =&gt; (\n              &lt;div key={`${video.id}-${video.__typename}`} className=\"flex flex-col w-full  gap-4 rounded overflow-hidden\"&gt;\n                &lt;div className=\"aspect-video\"&gt;\n                  &lt;img alt=\"\" src={video.thumbnailDefault ?? ''} className=\" h-full w-full object-cover \" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt; {sliceText({ s: video.title })}&lt;/div&gt;\n              &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n\n\n</code></pre>\n\n</div>\n\n\n\n<p>That resolves our problem and it allow us to slide through the content while maintaining an appealing interface and keeping the code optimal.</p>\n\n<p><a class=\"article-body-image-wrapper\" href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrbhokcnokji99j85maf.png\"><img alt=\" \" height=\"497\" src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrbhokcnokji99j85maf.png\" width=\"800\" /></a></p>\n\n<p>About Me:</p>\n\n<p>I am Mohamed Sharif and I have an undergraduate degree in computer science from San Francisco State University. I am currently starting a master degree towards machine learning and artificial intelligence through Drexel University. Since graduation I started to focus on full stack development. I enjoy writing blogs and currently implementing a full stack clone of youtube application. I reside in the San Francisco Bay area near silicon valley. I am open full full stack development roles. If you would like to connect, send me an invite on linkedin.</p>\n\n<p><a href=\"https://www.linkedin.com/in/mohamed-sharif-47301520b/\" rel=\"noopener noreferrer\">My Linkedin Account</a></p>"
        }
      },
      "ai_reasoning": "unclear response: start your answer explicitly with \"yes,\" or \"no\", and include at least one specific detail from the summary that justifies the response of exactly one word.<|end|><|assistant|> no, because the article discusses implementing a grid layout based on dynamic width changes"
    }
  ],
  "total_articles": 3,
  "generated_at": "2025-07-21 14:33:43"
}